import undetected_chromedriver as uc
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.common.exceptions import TimeoutException
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver import ActionChains
import pyautogui
import time
import os

from datetime import datetime

def selectionner_date(driver, jour_voulu, mois_voulu):
    """
    S√©lectionne une date sp√©cifique dans le calendrier TikTok Studio.
    Format attendu : jour_voulu = "21", mois_voulu = "07"
    """
    try:
        # Attendre que le calendrier soit bien visible
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.CLASS_NAME, "tux-calendar"))
        )
        print("üìÖ Calendrier charg√©.")

        mois_noms = {
            "janvier": "01", "f√©vrier": "02", "mars": "03", "avril": "04",
            "mai": "05", "juin": "06", "juillet": "07", "ao√ªt": "08",
            "septembre": "09", "octobre": "10", "novembre": "11", "d√©cembre": "12"
        }

        # Lire le mois actuellement affich√©
        en_tete = driver.find_element(By.XPATH, '//div[contains(@class,"tux-calendar-header")]')
        texte_mois_annee = en_tete.text.strip().lower()
        mois_actuel_nom, annee_actuelle = texte_mois_annee.split()

        mois_actuel = mois_noms.get(mois_actuel_nom)
        if not mois_actuel:
            print(f"‚ùå Mois non reconnu : {mois_actuel_nom}")
            return

        ecart = int(mois_voulu) - int(mois_actuel)
        if ecart != 0:
            bouton = en_tete.find_elements(By.TAG_NAME, "button")[1 if ecart > 0 else 0]
            for _ in range(abs(ecart)):
                bouton.click()
                time.sleep(0.5)

        # Attente explicite que les jours soient pr√©sents
        WebDriverWait(driver, 10).until(
            EC.presence_of_all_elements_located((By.XPATH, '//td[@role="gridcell"]/div'))
        )

        jours = driver.find_elements(By.XPATH, '//td[@role="gridcell"]/div')
        for jour in jours:
            if jour.text.strip() == str(int(jour_voulu)):  # Ex: "7" == "07"
                jour.click()
                print(f"‚úÖ Jour {jour_voulu} s√©lectionn√©.")
                return

        print(f"‚ùå Jour {jour_voulu} non trouv√©.")
    except Exception as e:
        print(f"‚ùå Erreur s√©lection date : {e}")




def scroll_jusqua_et_selectionne_heure(driver, heure_voulue=None, scroll_amount=23):
    """
    Scrolle de mani√®re simple vers le bas 'scroll_amount' fois (par d√©faut 23 crans),
    attend 50 secondes, puis fait un break.
    """
    print(heure_voulue)
    try:
        print(f"üîΩ Scroll de {scroll_amount} crans vers le bas en cours...")
        for i in range(scroll_amount):
            pyautogui.scroll(500)  # Scroll vers le haut
            time.sleep(0.01)
            print(f"‚ÜòÔ∏è Scroll {i + 1}/{scroll_amount}")

        scroll_depth = int(heure_voulue)
        for i in range(scroll_depth):
            pyautogui.scroll(-500)
            time.sleep(0.01)
            print(f"‚ÜòÔ∏è Scroll {i + 1}/{scroll_depth}")


        print("üõë Fin du scroll simul√©. (Pas de s√©lection d'heure)")
        return True  # Toujours vrai, car plus de recherche d'heure
    except Exception as e:
        print(f"‚ùå Erreur pendant le scroll simul√© : {e}")
        return False




def move_mouse_above_element(driver, element, y_offset=30):
    """D√©place la souris au-dessus d‚Äôun √©l√©ment (en y_offset)."""
    try:
        location = element.location_once_scrolled_into_view
        size = element.size
        x = location['x'] + size['width'] // 2
        y = location['y'] + size['height'] // 2 - y_offset

        window_position = driver.get_window_position()
        x += window_position['x']
        y += window_position['y'] + 80  # Ajustement pour la barre de titre

        pyautogui.moveTo(x, y, duration=0.3)
        time.sleep(0.3)
        print(f"‚úÖ Souris d√©plac√©e vers x={x}, y={y}")
    except Exception as e:
        print(f"‚ùå Erreur d√©placement souris : {e}")


def Upload_Video_Part(path, best_time_to_upload):
    options = uc.ChromeOptions()
    options.add_argument(r"--user-data-dir=C:\Users\thebe\Documents\chrome_profiles")
    options.add_argument("--profile-directory=Default")
    # üëá Ajoute ceci avec le chemin exact vers ton Chrome
    options.binary_location = r"C:\Program Files\Google\Chrome\Application\chrome.exe"

    
    try:
        driver = uc.Chrome(options=options)
        driver.get("https://www.tiktok.com/tiktokstudio/upload?from=webapp")
    except Exception as e:
        raise RuntimeError(f"‚ùå Erreur au lancement du navigateur : {e}")

    time.sleep(5)
    wait = WebDriverWait(driver, 10)

    for index, (nom_fichier, heure_minute, jour, numero_jour, numero_mois) in enumerate(best_time_to_upload, start=1):
        try:
            heure, minute = heure_minute.split(":")
        except Exception as e:
            print(f"‚ùå Format heure incorrect '{heure_minute}' : {e}")
            continue

        chemin_fichier = os.path.abspath(f"output/video_partie/{path}/{nom_fichier}")
        print(f"\n‚è≥ Partie {index}/{len(best_time_to_upload)} : {nom_fichier} pour {jour} √† {heure_minute}")

        if not os.path.exists(chemin_fichier):
            print(f"‚ùå Fichier introuvable : {chemin_fichier}")
            continue

        try:
            input_upload = driver.find_element(By.XPATH, '//input[@type="file"]')
            input_upload.send_keys(chemin_fichier)
            print(f"‚úÖ {nom_fichier} envoy√© avec succ√®s.")
        except Exception as e:
            print(f"‚ùå Erreur upload : {e}")
            continue

        try:
            time.sleep(0.5)
            champ_description = driver.find_element(By.CLASS_NAME, "public-DraftEditor-content")
            champ_description.click()
            time.sleep(1)
            champ_description.send_keys(Keys.CONTROL, 'a')
            champ_description.send_keys(Keys.BACKSPACE)
            time.sleep(0.5)

            numero_partie = nom_fichier.replace(".mp4", "").replace("part_", "")
            description = f"""part {numero_partie}
#s√©rieaddict #binge #momentfort
#partie{numero_partie} #√©pisode{numero_partie}
#sc√®neculte #film #serie
#suspens #intrigue #mustwatch
#foryou #pourtoi #tiktokserie
#saison8 #rickandmorty @fa17ur3"""
            champ_description.send_keys(description)
            print("‚úÖ Description ins√©r√©e.")
            time.sleep(0.5)
        except Exception as e:
            print(f"‚ùå Erreur description : {e}")

        try:
            bouton_programmer = driver.find_element(By.XPATH, '//span[text()="Programmer"]')
            bouton_programmer.click()
            print("‚úÖ Bouton 'Programmer' cliqu√©.")
        except Exception as e:
            print(f"‚ùå Erreur clic 'Programmer' : {e}")
            continue

        # S√©lection de l'heure et des minutes apr√®s clic
        try:
            champ_heure = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, 'input.TUXTextInputCore-input')))
            ActionChains(driver).move_to_element(champ_heure).click().perform()
            print("‚úÖ S√©lecteur heure/minute affich√©.")
            time.sleep(1.2)

            move_mouse_above_element(driver, champ_heure, y_offset=30)
            print("‚úÖ Souris positionn√©e au-dessus du champ.")
            time.sleep(1)

            heure_ok = scroll_jusqua_et_selectionne_heure(driver, heure)
            elements = driver.find_elements(By.XPATH, '//div[contains(@class,"tiktok-timepicker-option-list")]//div[contains(@class,"tiktok-timepicker-option-item")]//div[contains(@class,"tiktok-timepicker-option-item")]')
            print("üîç V√©rification des minutes affich√©es :")
            for el in elements:
                texte = el.text.strip()
                print(f"‚û°Ô∏è '{texte}'")

            

            if heure_ok:
                print(f"‚úÖ {heure}:{minute} s√©lectionn√© avec succ√®s.")
            else:
                print(f"‚ö†Ô∏è √âchec de s√©lection pour {heure}:{minute}.")

            # D√©placement simul√© de la souris vers la droite
            try:
                x, y = pyautogui.position()
                print(f"üìç Position actuelle de la souris : x={x}, y={y}")
                for i in range(1, 11):
                    pyautogui.moveTo(x + (5 * i), y, duration=0.02)
                print(f"‚úÖ Souris d√©plac√©e progressivement de 50px vers la droite.")
            except Exception as e:
                print(f"‚ùå Erreur lors du d√©placement simul√© de la souris : {e}")

            # Scroll vers le haut de 16 crans
            try:
                print("üîÑ D√©but du scroll vers le haut (12 crans)...")
                for i in range(12):
                    pyautogui.scroll(100)  # Scroll de 1 cran vers le haut
                    time.sleep(0.01)       # Pause visible entre chaque scroll (modifiable)
                    print(f"‚Ü• Scroll {i+1}/16 effectu√©.")
                print("‚úÖ Scroll de 16 crans vers le haut termin√©.")
            except Exception as e:
                print(f"‚ùå Erreur lors du scroll progressif : {e}")
            # Scroll vers le bas en fonction des minutes
            try:
                minute_int = int(minute)
                scroll_count = minute_int // 5  # 1 scroll pour chaque tranche de 5 minutes
                print(f"üïí Minute = {minute_int}, donc on va scroller vers le bas {scroll_count} fois.")

                for i in range(scroll_count):
                    pyautogui.scroll(-100)  # Scroll vers le bas
                    time.sleep(0.01)
                    print(f"‚ÜòÔ∏è Scroll bas {i+1}/{scroll_count}")
                print("‚úÖ Scroll minute termin√©.")
            except Exception as e:
                print(f"‚ùå Erreur lors du scroll minute : {e}")

        except Exception as e:
            print(f"‚ùå Erreur lors de la s√©lection heure/minute : {e}")


        # Fermer le s√©lecteur d'heure (en cliquant en dehors)
        pyautogui.click(x=500, y=300)  # Coordonn√©es g√©n√©riques √† ajuster si besoin
        time.sleep(0.5)


        try:
            # Attente que le champ de date soit cliquable
            champ_date = WebDriverWait(driver, 10).until(
                EC.element_to_be_clickable((By.CSS_SELECTOR, 'input.TUXTextInputCore-input[readonly][value*="2025"]'))
            )

            champ_date.click()
            print("üñ±Ô∏è Champ de date cliqu√©.")

            time.sleep(1.5)  # Attendre l'apparition du calendrier

            try:
                print("üîç Recherche des jours visibles dans le calendrier...")

                # Trouver tous les <span> qui ont une classe contenant "day"
                jours = WebDriverWait(driver, 10).until(
                    EC.presence_of_all_elements_located((By.XPATH, '//span[contains(@class, "day")]'))
                )

                print(f"üìÖ {len(jours)} jours d√©tect√©s :")
                for i, jour in enumerate(jours, start=1):
                    texte = jour.text.strip()
                    classes = jour.get_attribute("class")
                    print(f"  ‚û§ Jour {i}: '{texte}' (classes: {classes})")

                # üéØ Jour cibl√© √† partir de ta donn√©e [('part_1.mp4', '16:00', 'Mardi', '22', '07')]
                jour_trouve = False

                for jour in jours:
                    texte = jour.text.strip()
                    classes = jour.get_attribute("class")

                    # On clique uniquement sur les jours valides
                    if texte == numero_jour and "valid" in classes:
                        print(f"üñ±Ô∏è Clic sur le jour {texte} (classes: {classes})")
                        jour.click()
                        jour_trouve = True
                        break

                if not jour_trouve:
                    print(f"‚ö†Ô∏è Le jour '{numero_jour}' n'a pas √©t√© trouv√© ou n'est pas cliquable.")

            except Exception as e:
                print(f"‚ùå Erreur affichage des jours : {e}")

        except Exception as e:
            print(f"‚ùå Erreur lors du clic ou s√©lection de la date : {e}")

        try:
            # Attente que le bouton "Programmer" soit cliquable
            bouton_programmer = WebDriverWait(driver, 10).until(
                EC.element_to_be_clickable((By.CSS_SELECTOR, 'button[data-e2e="post_video_button"]'))
            )
            bouton_programmer.click()
            print("‚úÖ Bouton 'Programmer' cliqu√© avec succ√®s.")
        except Exception as e:
            print(f"‚ùå Erreur lors du clic sur le bouton 'Programmer' : {e}")

        time.sleep(2)


        try:
            # Aller vers l'URL TikTok Studio sans relancer le navigateur
            driver.get("https://www.tiktok.com/tiktokstudio/upload?from=webapp")
            print("üîÑ Navigation vers la page d'upload r√©ussie.")
            time.sleep(4)  # Attendre le chargement complet de la page
        except Exception as e:
            print(f"‚ùå Erreur navigation vers la page d'upload : {e}")



    time.sleep(10)


    input("\n‚úÖ Tous les fichiers trait√©s. Appuie sur Entr√©e pour quitter...")

    
    driver.quit()
